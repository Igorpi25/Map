package com.ivanov.tech.map;

import org.json.JSONException;
import org.json.JSONObject;

import android.os.IBinder;
import android.app.ActivityManager;
import android.app.ActivityManager.RunningServiceInfo;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.util.Log;

import com.ivanov.tech.map.provider.DBContract;
import com.ivanov.tech.map.service.MapService;
import com.ivanov.tech.map.service.ServiceGPS;
import com.ivanov.tech.map.service.TransportMap;
import com.ivanov.tech.map.ui.FragmentMapGroup;
import com.ivanov.tech.map.ui.FragmentMapOneUser;
import com.ivanov.tech.session.Session;

public class Map {
	
	private static final String TAG = "Map";

    //Message
    public static final int TRANSPORT_MAP=2;

	public static final int UPDATE_MIN_SPAN=10*1000;
	public static final float UPDATE_MIN_DISTANCE=5.0f;
	
	//JSON_TYPE Incoming messages
    public static final int INCOMING_START_BROADCAST = 1;
    public static final int INCOMING_STOP_BROADCAST = 2;
    public static final int INCOMING_COORS = 3;
    public static final int INCOMING_START_RECIEVE_CONFIRM = 4;
    
    //JSON_TYPE Outgoing messages
    public static final int OUTGOING_START_RECIEVE = 1;
    public static final int OUTGOING_STOP_RECIEVE = 2;
    public static final int OUTGOING_COORS = 3;
    
    //RECIEVER_TYPE
    public static final int RECIEVER_TYPE_FRIENDS = 1;
    public static final int RECIEVER_TYPE_ONE_USER = 2;
    public static final int RECIEVER_TYPE_GROUP = 3;
	    
    private static final String PREF = "MAP";
    public static final String PREF_PROVIDER="PREF_PROVIDER";
    public static final int PREF_PROVIDER_DEFAULT=DBContract.PROVIDER_GOOGLE;
    
	static private SharedPreferences preferences=null;
    
    public static void Initialize(Context context){
    	if(preferences==null){
    		preferences=context.getApplicationContext().getSharedPreferences(PREF, 0);
    	}
    }
    
    public static int getProvider(){
    	return preferences.getInt(PREF_PROVIDER, PREF_PROVIDER_DEFAULT);
    }
    
    public static void setProvider(int provider){
    	preferences.edit().putInt(PREF_PROVIDER, provider).commit();
    }
//---------------Fragments--------------------
    
    public static void showMapOneUser(final int clientid, final Context context, final FragmentManager fragmentManager, final int container){
    	try{
            if(fragmentManager.findFragmentByTag("MapOneUser").isVisible()){
                return;
            }else{
                throw (new NullPointerException());
            }
        }catch(NullPointerException e){

        	FragmentMapOneUser fragment=FragmentMapOneUser.newInstance(clientid);

            FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
            fragmentTransaction.add(container, fragment, "MapOneUser");
            fragmentTransaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
            fragmentTransaction.addToBackStack("MapOneUser");
            fragmentTransaction.commit();
        }
    }
    
    public static void showMapGroup(final int groupid, final Context context, final FragmentManager fragmentManager, final int container){
    	try{
            if(fragmentManager.findFragmentByTag("MapGroup").isVisible()){
                return;
            }else{
                throw (new NullPointerException());
            }
        }catch(NullPointerException e){

        	FragmentMapGroup fragment=FragmentMapGroup.newInstance(groupid);

            FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
            fragmentTransaction.add(container, fragment, "MapGroup");
            fragmentTransaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
            fragmentTransaction.addToBackStack("MapGroup");
            fragmentTransaction.commit();
        }
    }

//-----------------------Services-----------------
  	
    public static void ongoingStartRecieve(Context context,int type,float radius,int clientid){
	    	    
	    JSONObject json=new JSONObject();
	    try {		
	    	json.put(TransportMap.JSON_TRANSPORT, Map.TRANSPORT_MAP);
		    json.put(TransportMap.JSON_TYPE, OUTGOING_START_RECIEVE);		    
		    json.put(TransportMap.JSON_RADIUS, radius);		    
		    json.put(TransportMap.JSON_RECIEVER_CLIENTID, clientid);		    
		    json.put(TransportMap.JSON_RECIEVER_TYPE, type);
	    
	    } catch (JSONException e) {
	    	Log.d(TAG,"ongoingStartRecieve JSONException e="+e);
		}
	    
	    Intent intent=new Intent(context,MapService.class);
	    intent.putExtra("userid", Session.getUserId());
	    intent.putExtra("transport", Map.TRANSPORT_MAP);
	    intent.putExtra("json", json.toString());
	    
	    Log.d(TAG,"ongoingStartRecieve type="+type+" radius="+radius+" clientid="+clientid);
	    context.startService(intent);
	}
    
    public static void ongoingStopRecieve(Context context){
    	JSONObject json=new JSONObject();
	    try {		
	    	json.put(TransportMap.JSON_TRANSPORT, Map.TRANSPORT_MAP);
		    json.put(TransportMap.JSON_TYPE, OUTGOING_STOP_RECIEVE);	
	    
	    } catch (JSONException e) {
	    	Log.d(TAG,"ongoingStopRecieve JSONException e="+e);
		}
	    
	    Intent intent=new Intent(context,MapService.class);
	    intent.putExtra("userid", Session.getUserId());
	    intent.putExtra("transport", Map.TRANSPORT_MAP);
	    intent.putExtra("json", json.toString());
	    
	    Log.d(TAG,"ongoingStopRecieve");
	    context.startService(intent);
	}
        
    public static android.content.ServiceConnection bindServiceGPS(Context context){
    	Log.d(TAG, "bindServiceGPS");
    	
    	Intent intent=new Intent(context,ServiceGPS.class);
    	android.content.ServiceConnection serviceconnection;
        
    	serviceconnection = new android.content.ServiceConnection() {
          public void onServiceConnected(ComponentName name, IBinder binder) {
            Log.d(TAG, "bindServiceGPS serviceconnection onServiceConnected");
          }

          public void onServiceDisconnected(ComponentName name) {
            Log.d(TAG, "bindServiceGPS serviceconnection onServiceDisconnected");
          }
        };
        
        if(context.bindService(intent, serviceconnection, context.BIND_AUTO_CREATE)){
        	Log.d(TAG, "bindServiceGPS binded successfully");
        	return serviceconnection;
        }else{
        	Log.e(TAG, "bindServiceGPS binding fail");
        	return null;
        }
    }
    
    public static void unbindServiceGPS(Context context, android.content.ServiceConnection serviceconnection){  
    	Log.d(TAG, "unbindServiceGPS");
    	try{
    		context.unbindService(serviceconnection);    		
    		
    	}catch(Exception e){
    		Log.d(TAG, "unbindServiceGPS Exception e="+e);
    	}
    }
    
    public static void startServiceGPSForCurrentBestLocation(Context context){
	    
	    Intent intent=new Intent(context,ServiceGPS.class);
	    
	    //Log.d(TAG,"startServiceGPSForCurrentBestLocation");
	    context.startService(intent);
	}
    
    public static boolean isServiceGPSRunning(Context context) {
        ActivityManager manager = (ActivityManager) context.getSystemService(context.ACTIVITY_SERVICE);
        for (RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {
            if (ServiceGPS.class.getName().equals(service.service.getClassName())) {
                return true;
            }
        }
        return false;
    }
    
    public static boolean isServiceConnectionRunning(Context context) {
        ActivityManager manager = (ActivityManager) context.getSystemService(context.ACTIVITY_SERVICE);
        for (RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {
            if (MapService.class.getName().equals(service.service.getClassName())) {
                return true;
            }
        }
        return false;
    }
		
	
}
